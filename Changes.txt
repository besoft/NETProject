13.9.2013 - Data Persistence (EF):

- Do Domain pridana jednoducha serializace do databaze prostrednictvim Entity Framework. Databaze je pokazdne pri 
ukladani smazana, veskera data jsou drzena v pameti (v puvodnich kolekcich). Do Category, Evaluation a Student
musel byt pridan identifikator Id, aby EF dokazal automaticky vytvorit pro to entity.
- Databaze je na urovni SQL Serveru (do budoucna budeme resit, jak to zmenit, tj. ConnectionString)

- Ukazane principy: Entity Framework (NuGets: pres kontextove menu na projektu zavolat Manage NuGet Packages ... a
nainstalovat EF 5.x; nezapomenout zkopirovat prislusnou sekci z Domain/App.config do aplikacniho App.config, jinak
EF selze z duvodu nespecifikovaneho ConnectionString)

TODO: pozmenit design tak, aby implicitne se pocitalo s EF, pak cela soucasna slozitost odpadne

13.9.2013 - Data Persistence (XML):

- Pridana schopnost ukladat / nacitat repository do / z uloziste (XML soubor)

- Ukazane principy: rozhrani a kontrakty pro rozhrani, extension class, WCF DataContract, Serializace, Streamy

12.9.2013 - Referencni integrita II:

- Referencni integrita je konecne zajistena i pro komplexni situace
- Pridany nove testy
- Rozsirena pusobnost kontraktu (bez varovani a navrhu)

- Ukazane principy: kontrakty se specifikuji v zakladnim navrhu metody, oddedene tridy jiz v prepsanych
metodach kontrakty znova nespecifikuji, rovnou pracuji s temi z predka; ukazan Ensures a Assume

9.9.2013 - Referencni integrita:
- Predchozi verze fungovala dobre az na pripad, kdy se meni v hodnoceni vlastnosti Student nebo Category, protoze 
v tomto pripade se nejprve zrusi hodnoceni ze Student.Evaluations resp. Category.Evaluations, coz vede k notifikaci
zmeny kolekce, ktera je na domene osetrena zrusenim hodnoceni z this.Evaluations, coz zpusobi odregistrovani
prijimani notifikaci, takze po naslednem prirazeni se domena o nicem nedozvi.

31.7.2013 - Reference integrity:

- List<T> kolekce nahrazeny ObservableCollection<T> a v Domain pridan mechanismus pro zajisteni referencni integrity,
	tj. prideni/odebrani studenta, hodnoceni nebo kategorie se automaticky propaguje.
	
- Prislusnym zpusobem upraveny unit testy

- Ukazane principy: observable kolekce, delegati a obsluha, operator ??

- TODO: persistentni repozitar


30.7.2013 - Another simple solution:

- Pole nahrazeny .NET 2.0 List<T> kolekci, takze vytvoreni repozitare se zjednodussi, navic je zde moznost pridavat
	ci odebirat studenty, hodnoceni i definice hodnoceni
- Pridan unit test projekt pro overeni funkcionality Core
- Pridano zajisteni integrity dat (na urovni atributu tridy) pro zamezeni padu
- Referencni integrita neni zajistena, tj. kategorie hodnoceni muze byt odebrana z kolekce kategorii, ale hodnoceni
	stale zustava, analogicky totez plati pro kolekci studentu 

- Ukazane principy: .NET 2.0 genericke kolekce, unit testy, kontrakty a Microsoft Code Digger (viz
	http://research.microsoft.com/en-us/projects/codedigger/gettingstarted.aspx)

- TODO: nahradit .NET 2.0 kolekce Observable kolekcemi, pouzit LINQ pro zjednoduseni vypoctu


30.7.2013 - First simple solution:

- Vytvoreno nekolik projektu:
	Core = obsahuje jadro celeho reseni, tridy pro uchovani dat o studentech (Student), jejich hodnoceni (Evaluation)
	a definice hodnoceni (Category)

	Domain = obsahuje repozitar, tj. uloziste dat

	TestApplication = jednoducha testovaci aplikace

- Domain obsahuje testovaci repositar bez jakekoliv schopnosti perzistence (jen predem vytvoreny pametovy zaznam)
- Repozitar je urcen v podstate pouze pro cteni: nelze pridavat nove studenty, nova hodnoceni ani nove definice,
	nelze odstranovat studenty, hodnoceni ci definice; lze menit atributy studentu, hodnoceni, definice
- Hodnoceni jsou jednourovnove, tj. neni zde zadna hierarchie, vse je na stejne urovni

- Ukazane principy C#: trida, property, decimal, nullable type, override ToString, foreach, pole

- TODO: nahradit pole .NET 2.0 kolekcemi, pouzit LINQ pro zjednoduseni vypoctu

30.7.2013 - Blank solution